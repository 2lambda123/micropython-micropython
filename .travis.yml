# global options
dist: xenial
language:
  - c
compiler:
  - gcc
cache:
  edge: true
  directories:
    - "${HOME}/persist"
env:
  global:
    - MAKEOPTS="-j4"

notifications:
  slack:
    rooms:
      - secure: JHXzIOoErQS63tVQFvllpgYFQPv2vxanQfUuMdRaXbD70zMdQc5haIb6TO2tHR8zGK51ep6t2lKlyzYSNl+HwIpDT0/hAyvvDZ4iWzsnE6vF3OhMQgxKmqFqNdc8CWh+fRBchmtu3NAY7L+pTGUy8o/OkurhlTC/yjHg4PY8xnW4CV/O1h+eNHN+L2dJvh7Lf8/DTJNZfiMzcwkwchYHcr/MlcUg6pgQdKVg3GoI13UosHd7PsK/1pNL3HGPkCvZ7n3PYb0tPvRkAssmeYVZE2dBm7wNrfoqIeItfLzFGYL8EjNmuE+O4wT3G8jZ9qkhxJB8P9hNeK3z9N2d7KJPVoN8JuOW0Ln3sPJVfYY5ICa1hewBQhGBY3CzXbJJpQ499atb5/ZJ3zrTTJZlNLoMz4mkk3GznZSBaAeEa0Jp253vzOIQtAwZ0YblBd9LXLTVRjAZWF/XQxyrQaNL1TM1Hr0CPPdWCmILOdimwbjWLrGkIWgRICIBeHuI4xKNaNoTbKmt1grRfxu+6ZmUf6jv9ECp8yxAHDMHvOOh/gC2kMvNxQiPJyirBd4kFVSQKSclkvJkMddKAMKmX0V5EacfZC46OTRBK6tZZb7uKGu+RlCwAxrLiaD9ia8JG3gigARpHrHl27lzyA05pUBbrAfoou5xtTrds7UTaOFNp5csNZs=
    on_success: always  # change: send a notification when the build status changes.
    on_failure: always  # always: always send a notification.
    template:
      - "Repo `%{repository_slug}` *%{result}* build (<%{build_url}|#%{build_number}>) for commit (<%{compare_url}|%{commit}>) on branch `%{branch}`."
      - "Execution time: *%{duration}*"
      - "Artefacts: %{ARTEFACTS_URL}"

# define the successive stages
stages:
  - name: staging

# define the jobs for the stages
# order of the jobs has longest running first to optimise total time
jobs:
  include:
    # esp32
    - stage: staging
      env: NAME="esp32 port build"
      before_install:
        - git submodule update --init --recursive
        - wget https://dl.espressif.com/dl/xtensa-esp32-elf-linux64-1.22.0-80-g6c4433a-5.2.0.tar.gz
        - tar -zxvf xtensa-esp32-elf-linux64-1.22.0-80-g6c4433a-5.2.0.tar.gz
        - export PATH=$HOME/build/ilyamordasov/micropython/xtensa-esp32-elf/bin:$PATH
        - export ARTEFACTS_URL="none"
      install:
        - sudo apt-get install gcc
        - sudo apt-get install git
        - sudo apt-get install wget
        - sudo apt-get install make
        - sudo apt-get install libncurses-dev
        - sudo apt-get install flex
        - sudo apt-get install bison
        - sudo apt-get install gperf
        - sudo apt-get install python3-dev
        - sudo apt-get install python3
        - sudo apt-get install python3-pip
        - sudo apt-get install python-serial
        - sudo apt-get install python3-pyparsing
        - sudo apt-get install -y python3-setuptools
        - pip3 install pyparsing
        - pip3 install coveralls
        - pip3 install --user cpp-coveralls
        - pwd
      script:
        - pwd
        - ls
        - cd $HOME/build/ilyamordasov/micropython
        - git submodule update --init
        - git submodule init lib/berkeley-db-1.xx
        - cd lib/ESP-IDF
        - git checkout $IDF_HASH
        - cd ../..
        - git submodule update
        - export ESPIDF=$HOME/build/ilyamordasov/micropython/lib/ESP-IDF
        - make ${MAKEOPTS} -C mpy-cross
        - make ${MAKEOPTS} -C ports/esp32
        - cd $HOME/build/ilyamordasov/micropython/ports/esp32/build
        - zip -r -j ESP32_v.1.10.$TRAVIS_BUILD_NUMBER_$TRAVIS_BRANCH.zip *.bin *.elf
        - export ZIP=$(readlink -f ESP32_v.1.10.$TRAVIS_BUILD_NUMBER_$TRAVIS_BRANCH.zip)
        - export ARTEFACTS_URL=$(curl -F "file=@$ZIP" https://anonfile.com/api/upload | jq -r '.short')
        - echo $ARTEFACTS_URL
      # after_success:
      #   coveralls
      before_deploy:
        # Set up git user name and tag this commit
        - git config --local user.name "ilyamordasov"
        - git config --local user.email "carlogulliani@gmail.com"
        - export TRAVIS_TAG="bluetooth-init"
        - git tag $TRAVIS_TAG
      deploy:
        provider: releases
        api_key: $GITHUB_OAUTH_TOKEN
        file: $ZIP
        skip_cleanup: true
        on:
          # branch: master
          tags: true
