# global options
dist: xenial
language:
  - c
compiler:
  - gcc
cache:
  directories:
    - "${HOME}/persist"
env:
  global:
    - MAKEOPTS="-j4"
    - IDF_HASH="5c88c5996dbde6208e3bec05abc21ff6cd822d26"

# define the successive stages
stages:
  - name: staging

# define the jobs for the stages
# order of the jobs has longest running first to optimise total time
jobs:
  include:
    # esp32
    - stage: staging
      env: NAME="esp32 port build"
      before_install:
        - git submodule update --init --recursive
      install:
        - sudo apt-get install gcc
        - sudo apt-get install git
        - sudo apt-get install wget
        - sudo apt-get install make
        - sudo apt-get install libncurses-dev
        - sudo apt-get install flex
        - sudo apt-get install bison
        - sudo apt-get install gperf
        - sudo apt-get install python-dev
        - sudo apt-get install python3
        - sudo apt-get install python3-pip
        - sudo apt-get install python-serial
        - sudo apt-get install python3-pyparsing
        - pip3 install pyparsing
        - pwd
        - wget https://dl.espressif.com/dl/xtensa-esp32-elf-linux64-1.22.0-80-g6c4433a-5.2.0.tar.gz
        - tar -zxvf xtensa-esp32-elf-linux64-1.22.0-80-g6c4433a-5.2.0.tar.gz
        - export PATH=$HOME/build/xtensa-esp32-elf/bin:$PATH
      script:
        - pwd
        - ls
        - cd $HOME/build/ilyamordasov/micropython
        - git submodule update --init
        - git submodule init lib/berkeley-db-1.xx
        - git submodule init lib/ESP-IDF
        - git submodule update
        - export ESPIDF=$HOME/build/ilyamordasov/micropython/lib/ESP-IDF
        - make ${MAKEOPTS} -C mpy-cross
        - make ${MAKEOPTS} -C ports/esp32
      
    
#     # stm32 port
#     - stage: staging
#       env: NAME="stm32 port build"
#       install:
#         # need newer gcc version for Cortex-M7 support
#         - sudo add-apt-repository -y ppa:team-gcc-arm-embedded/ppa
#         - sudo apt-get update -qq || true
#         - sudo apt-get install gcc-arm-embedded
#         - sudo apt-get install libnewlib-arm-none-eabi
#         - arm-none-eabi-gcc --version
#       script:
#         - make ${MAKEOPTS} -C mpy-cross
#         - make ${MAKEOPTS} -C ports/stm32
#         - make ${MAKEOPTS} -C ports/stm32 BOARD=PYBV11 MICROPY_PY_WIZNET5K=5200 MICROPY_PY_CC3K=1
#         - make ${MAKEOPTS} -C ports/stm32 BOARD=STM32F769DISC
#         - make ${MAKEOPTS} -C ports/stm32 BOARD=STM32L476DISC

#     # qemu-arm port
#     - stage: staging
#       env: NAME="qemu-arm port build and tests"
#       install:
#         - sudo apt-get install gcc-arm-none-eabi
#         - sudo apt-get install libnewlib-arm-none-eabi
#         - sudo apt-get install qemu-system
#         - arm-none-eabi-gcc --version
#         - qemu-system-arm --version
#       script:
#         - make ${MAKEOPTS} -C mpy-cross
#         - make ${MAKEOPTS} -C ports/qemu-arm -f Makefile.test test
#       after_failure:
#         - grep "FAIL" ports/qemu-arm/build/console.out

#     # standard unix port
#     - stage: staging
#       env: NAME="unix port build and tests"
#       script:
#         - make ${MAKEOPTS} -C mpy-cross
#         - make ${MAKEOPTS} -C ports/unix deplibs
#         - make ${MAKEOPTS} -C ports/unix
#         - make ${MAKEOPTS} -C ports/unix test

#     # unix nanbox
#     - stage: staging
#       env: NAME="unix nanbox port build and tests"
#       install:
#         - sudo apt-get install gcc-multilib libffi-dev:i386
#       script:
#         - make ${MAKEOPTS} -C mpy-cross
#         - make ${MAKEOPTS} -C ports/unix deplibs
#         - make ${MAKEOPTS} -C ports/unix nanbox
#         - (cd tests && MICROPY_CPYTHON3=python3 MICROPY_MICROPYTHON=../ports/unix/micropython_nanbox ./run-tests)

#     # unix stackless
#     - stage: staging
#       env: NAME="unix stackless port build and tests"
#       script:
#         - make ${MAKEOPTS} -C mpy-cross
#         - make ${MAKEOPTS} -C ports/unix deplibs
#         - make ${MAKEOPTS} -C ports/unix CFLAGS_EXTRA="-DMICROPY_STACKLESS=1 -DMICROPY_STACKLESS_STRICT=1"
#         - make ${MAKEOPTS} -C ports/unix test

#     # nrf port
#     - stage: staging
#       env: NAME="nrf port build"
#       install:
#         - sudo apt-get install gcc-arm-none-eabi
#         - sudo apt-get install libnewlib-arm-none-eabi
#         - arm-none-eabi-gcc --version
#       script:
#         - make ${MAKEOPTS} -C ports/nrf
